			ARRAYS

Arrays are a collection of similar variables of any basic type. 

They are declared as follows :

	int numbers[50], counters[2];

	float average[10];

	char name[20], address[40];

	int fred, xyz[10], abc;

Note that, as in the last example, array declaration can be mixed with ordinary variable
declarations hence they are of the same data type.

The declaration  "int numbers[50]" means there are 50 integers associated with the name "numbers"

They are individually named : 
	numbers[0], numbers[1], numbers[2], ... numbers[49]

Note the array element numbers[50] does not exist 

Each array element can be used as any variable of the same type.
	e.g	numbers[5] = 100 + counters[1] * 2;

Variables or expressions can be used to specify the array index :
	e.g	numbers[abc] = numbers[fred + 1];


	LIMITATIONS AND DANGERS IN THE USE OF AN ARRAY

Unlike some languages, such as Pascal, it is not possible to :

	1.	Assign whole arrays one to another.
			e.g  int Fred[10], Joe[10];
			     Fred = Joe;		/* invalid statement */

	2.	Compare one array with another.
			e.g  int Fred[10], Joe[10];
			     if (Fred == Joe) abc++;	/* valid but always false */

		(the if statement is explained in detail in the next section and the meaning of Fred == Joe in the
		 if statement is explained in the next section on pointers)

		To assign or compare arrays each element of each array must be assigned or compared in turn.

		But the  following is allowed in C !
			int x[10];
			x[100] = x[-5];			/* valid but dangerous ! */

		'C' merely counts forward or backwards in memory from it's starting point of element 0... and uses whatever it 
		 finds there !

		This can corrupt the other variables in a seemingly random manner...
			... a common source of difficulty to find errors !



	STRINGS 

 An array of characters with a null byte at the end is called a character "string".

It can be printed directly using %s printf :

	e.g 	char str[10];
		str[0] = 'j';
		str[1] = 'o';
		str[2] = 'e';
		str[3] = 0;
		printf("hello %s!\n", str);

This will send to the standard output screen message :

		hello joe!

Note : constant strings cannot be assigned to string arrays :

	e.g	str = "fred";				/* invalid */

	constant strings cannot be compared to string arrays :

	e.g	if (str == "joe") ...;			/* valid, but always false */

       	reason why will become clear in the next  section on pointers.


	THE gets(char array) FUNCTION FOR READING STRINGS

A string can be read from the keyboard using the function gets : 

	e.g 	gets(mystr);

this will read a string from the standard input (usually from the keyboard) until the user types the return key.
The function discards the newline character it has read and replaces it with a null character so that the input stored
in the array becomes a properly terminated character string.

N.B. It is important that the array specified as the gets  parameter is large enough to hold whatever string the user 
may input plus the null byte string terminator. If the user types in too many characters to the array, the extra character 
are inserted into memory straight after the array. This can cause unexpected corruption of data and can result in all sorts 
of errors, possibly crashing the program. It is better to allocate an array which has far too many array elements than risk
their being too few.

gets can also be used to represent the string it has read.

	e.g 	printf("the string is :  %s\n", gets(mystr));	/* reads a string into mystr and then output it */

In technical terms the function "gets" returns the pointer to the array given as parameter. The mechanism for this 
are explained in the next section.



	INITIALISATIONS OF ARRAYS

Arrays can be initialised as follows : 
	int xyz[6] = {4,7,3,9,100,6};

Too many initialisers will cause a compilation error.

If there are too few initialising values, the remaining array elements will default to zero.

Character array can also have a string initialisation :
	char name[12] = "fred bloggs";

....but it is important that the array is big enough for the given characters and the null terminator.

If an array is initialised the size can be left to default to the number of  initialising values.

	e.g 	char greeting[] = "hello!";
		int abc[] = {1,2,3,4,5,6,7};

	Both these arrays would default to a size of seven elements.



	TWO DIMENSIONAL ARRAYS

An array need not to be a single "list" of values. It can be like a two dimensional grip of values.

	e.g 	int chessboard[8][8];

this declares 64 intgers arranged in an 8*8 grip of rows and columns.

The first column of the first row could be used in the same way as any other integer as in the example :
	x = 2 * chessboard[0][0] + 123;

the next column of the first row would be given by : 

	chessboard[0][1]
	chessboard[0][1]
up to 	chessboard[0][7]

the next row will start with :
	
	chessboard[1][0]
then	chessboard[1][1]
up to	chessboard[1][7]

The last element of the array would be the last column of the last row which is :
	chessboard[7][7]


	ARRAYS TO ARRAYS 

Single dimensional arrays are used to store "lists" of data items ...but what if each item is a list?

consider a list of names, where each is effectively a list of characters.

A single name variable for names of up to thirty characters would be declared :
	char SingleName[30];

A list of 100 names would be declared;
	char ListOfName[100][30];

This now has the name stored in a "table" with 100 rows, with 30 columns and with each name stored in
a row of the table.

The elements of the array are usable as any other character 
e.g 	ch = ListOfNames[41][3];

This copies the 4th letter of the 42nd name into the char variable ch. 


	
	USING INDIVIDUAL ROWS 

Two dimensional arrays can be used a whole row at a time.  

e.g 	read a name into a  single dimensional array use :
		gets(SingleName);


	to print a name in a  single dimensional array use :
		printf("Name Is %s\n", SingleName);

	to read  a name into one row, a two dimensional array use :
		gets(ListOfName[41]);
	
	this would read the name from the keyboard in the 42nd row of the list of names 

i.e if only one set of [] is given after a two dimensional arrays name it effectively
	means a whole row of an array.


	
	ARRAY SYNTAX WARNING

Some language use a syntax of two numbers separated by a comma for two dimensional array elements.

For example in PASCAL, xyz[3,5] is equivalent to xyz[3][5] in C.

If xyz[3,5] is used in C, the value 3,5 is calculated using the comma operator (explained in the next section ).
To give the value 5 and so xyz[3,5] is the same as xyz[5], which is a whole row fortunately this often results in
invalid syntax and the C compiler usually gives either an error or a warning if these mistakes are made.
 

     


